// datasource and generator setup
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String    @id @default(cuid())

  // Updated fields (from checkout form)
  first_name String 
  last_name String 
  email     String    @unique             // Required, from form
  password  String                        // Updated validation (see below)
  
  // Address fields (new, from form)
  addressLine1 String? @map("address_line1")  
  addressLine2 String? @map("address_line2")  
  country      String? @default("United States (US)")  
  city         String?  
  state        String?  
  zipCode      String? @map("zip_code")  
  referralSource String? @map("referral_source")  

  // Existing fields (unchanged)
  role          UserRole  @default(USER)
  otp           String?
  otpExpiresAt  DateTime?
  isVerified    Boolean   @default(false)
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations (unchanged)
  blogPosts              BlogPost[]
  supportTickets          SupportTicket[]
  subscriptions           Subscription[]
  districtRegistrations   DistrictRegistration[]

  @@map("users")
}

model DistrictRegistration {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  
  // Personal Information
  firstName   String
  lastName    String
  email       String   @unique
  ccEmails    String[] // Array of CC email addresses
  
  // Organization Information
  companyName String
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  phone       String
  isTaxExempt Boolean
  taxExemptNumber String?
  
  // License Information
  licenseCount Int
  headquartersLocation String
  
  // Subscription Preferences
  interestedInQuarterly Boolean @default(false)
  interestedInAnnual    Boolean @default(false)
  wantsDemo            Boolean @default(false)
  
  // Marketing Information
  referralSource String
  
  // Additional Info
  additionalQuestions String?
  
  // Metadata
  formVersion String @default("digital.SLP")

  // Subscription reference
  subscriptionId String?
subscriptions Subscription[]
  userId String
  user User @relation(fields: [userId], references: [id])
}
model Team {
  id String @id @default(cuid())
  name String
  description String?
  designation String?  // Corrected spelling
  image String?
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  image     String?
  content   String
  authorId  String
  deletedAt DateTime?  // Add this field
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
  
  @@map("blog_posts")
}

model SupportTicket {
  id String @id @default(cuid())
  title String
  description String
  status     ticketStatus @default(OPEN)
  priority String @default("medium") // low, medium, high
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id])
}
enum ticketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

model ContentItem {
  id          String   @id @default(cuid())
  type        ContentType
  order       Int
  title       String
  description String?
  
  // For MCQ - stores array of questions with options
  mcqData     Json?
  
  // For media slider - stores array of media items
  mediaData   Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ContentType {
  MCQ
  MEDIA_SLIDER
  VIDEO_SLIDER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PENDING
  TRIAL
}

enum SubscriptionPlan {
  ANNUAL_PREMIUM
  QUARTERLY_PREMIUM
}

model Subscription {
  id String @id @default(cuid())
  userId String
  plan SubscriptionPlan
  status SubscriptionStatus @default(ACTIVE)
  startDate DateTime @default(now())
  endDate DateTime?
  licenseCount Int @default(1)
  
  // Features
  hasInteractivePDFs Boolean @default(true)
  hasDigitalGamesLibrary Boolean @default(true)
  receivesWeeklyEmails Boolean @default(true)
  hasPodcastAccess Boolean @default(true)
  hasHomeworkSheets Boolean @default(true)
  quickLinksMonthlyLimit Int
  
  // Payment info
  isGroupDiscount Boolean @default(false)
  groupSize Int?
  paymentAmount Float
  paymentCurrency String @default("USD")
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  
  user User @relation(fields: [userId], references: [id])
   districtRegistrationId String
  districtRegistration DistrictRegistration @relation(fields: [districtRegistrationId], references: [id])
  
  @@map("subscriptions")
}

model ContactFile {
  id               String            @id @default(cuid())
  filename         String
  originalName     String
  mimeType         String
  size             Int
  url              String
  contactSubmission ContactSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  createdAt        DateTime          @default(now())

  @@map("contact_files")
}
// Define the ContactStatus enum
enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Add the relation to ContactSubmission model
model ContactSubmission {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String?
  message     String
  status      ContactStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  files       ContactFile[]
  
  // Optional: Add fields for internal tracking
  assignedTo  String?
  response    String?
  respondedAt DateTime?

  @@map("contact_submissions")
}

