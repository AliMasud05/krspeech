// datasource and generator setup
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id String @id @default(cuid())

  name      String
  email     String @unique
  password  String

  role UserRole @default(USER)

  otp          String?
  otpExpiresAt DateTime?
  isVerified   Boolean   @default(false)

  accessToken  String?
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogPosts BlogPost[]
  supportTickets supportTicket[]
 

  @@map("users")
}


model  DistricRegistrationForm {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  
  // Personal Information
  firstName   String
  lastName    String
  email       String   @unique
  ccEmails    String[] // Array of CC email addresses
  
  // Organization Information
  companyName String
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  phone       String
  isTaxExempt Boolean
  taxExemptNumber String?
  
  // License Information
  licenseCount Int
  headquartersLocation String
  
  // Subscription Preferences
  interestedInQuarterly Boolean @default(false)
  interestedInAnnual    Boolean @default(false)
  wantsDemo            Boolean @default(false)
  
  // Marketing Information
  referralSource String
  
  // Additional Info
  additionalQuestions String?
  
  // Metadata
  formVersion String @default("digital.SLP")
}

model Team {
  id String @id @default(cuid())
  name String
  description String?
  degination String?
  image String?
}
model BlogPost {
  id String @id @default(cuid())
  title String
  image String?
  content String
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
}

model supportTicket {
  id String @id @default(cuid())
  title String
  description String
  status String @default("open") // open, in-progress, closed
  priority String @default("medium") // low, medium, high
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id])
}
